
LAB04_3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  08003024  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08003024  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e02  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e51  00000000  00000000  00029e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017295  00000000  00000000  0002d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cda9  00000000  00000000  00044445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826db  00000000  00000000  000511ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d38c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a38  00000000  00000000  000d391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f70 	.word	0x08002f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f70 	.word	0x08002f70

0800014c <get_input_button>:
int KeyReg3[NUM_button] = {NORMAL_STATE};
int TimerForKeyPress[NUM_button] = {TIME_INTO_LONG_PRESSED};

int button_flag[NUM_button] = {0};

void get_input_button(int index, GPIO_TypeDef *GPIOx, int GPIO_Pin){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	KeyReg0[index] = KeyReg1[index];
 8000158:	4a0f      	ldr	r2, [pc, #60]	; (8000198 <get_input_button+0x4c>)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	490e      	ldr	r1, [pc, #56]	; (800019c <get_input_button+0x50>)
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[index] = KeyReg2[index];
 8000168:	4a0d      	ldr	r2, [pc, #52]	; (80001a0 <get_input_button+0x54>)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4909      	ldr	r1, [pc, #36]	; (8000198 <get_input_button+0x4c>)
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[index] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	b29b      	uxth	r3, r3
 800017c:	4619      	mov	r1, r3
 800017e:	68b8      	ldr	r0, [r7, #8]
 8000180:	f001 feca 	bl	8001f18 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	4619      	mov	r1, r3
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <get_input_button+0x54>)
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	2000000c 	.word	0x2000000c
 800019c:	20000000 	.word	0x20000000
 80001a0:	20000018 	.word	0x20000018

080001a4 <isButtonPressed>:

int isButtonPressed(int but){
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(button_flag[but] == 1){
 80001ac:	4a09      	ldr	r2, [pc, #36]	; (80001d4 <isButtonPressed+0x30>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d106      	bne.n	80001c6 <isButtonPressed+0x22>
		button_flag[but] = 0;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <isButtonPressed+0x30>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2100      	movs	r1, #0
 80001be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001c2:	2301      	movs	r3, #1
 80001c4:	e000      	b.n	80001c8 <isButtonPressed+0x24>
	}
	return 0;
 80001c6:	2300      	movs	r3, #0
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	2000008c 	.word	0x2000008c

080001d8 <getKeyInput>:

void getKeyInput(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	get_input_button(0, Button1_GPIO_Port, Button1_Pin);
 80001de:	2210      	movs	r2, #16
 80001e0:	4938      	ldr	r1, [pc, #224]	; (80002c4 <getKeyInput+0xec>)
 80001e2:	2000      	movs	r0, #0
 80001e4:	f7ff ffb2 	bl	800014c <get_input_button>
	get_input_button(1, Button2_GPIO_Port, Button2_Pin);
 80001e8:	2220      	movs	r2, #32
 80001ea:	4936      	ldr	r1, [pc, #216]	; (80002c4 <getKeyInput+0xec>)
 80001ec:	2001      	movs	r0, #1
 80001ee:	f7ff ffad 	bl	800014c <get_input_button>
	get_input_button(2, Button3_GPIO_Port, Button3_Pin);
 80001f2:	2240      	movs	r2, #64	; 0x40
 80001f4:	4933      	ldr	r1, [pc, #204]	; (80002c4 <getKeyInput+0xec>)
 80001f6:	2002      	movs	r0, #2
 80001f8:	f7ff ffa8 	bl	800014c <get_input_button>

	for(int but = 0; but < 3; but ++){
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	e058      	b.n	80002b4 <getKeyInput+0xdc>
		if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 8000202:	4a31      	ldr	r2, [pc, #196]	; (80002c8 <getKeyInput+0xf0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4930      	ldr	r1, [pc, #192]	; (80002cc <getKeyInput+0xf4>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d14b      	bne.n	80002ae <getKeyInput+0xd6>
 8000216:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <getKeyInput+0xf4>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	492c      	ldr	r1, [pc, #176]	; (80002d0 <getKeyInput+0xf8>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d141      	bne.n	80002ae <getKeyInput+0xd6>
			// Nháº¥n nhanh
			if(KeyReg3[but] != KeyReg2[but]){
 800022a:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <getKeyInput+0xfc>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4927      	ldr	r1, [pc, #156]	; (80002d0 <getKeyInput+0xf8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d018      	beq.n	8000270 <getKeyInput+0x98>
				KeyReg3[but] = KeyReg2[but];
 800023e:	4a24      	ldr	r2, [pc, #144]	; (80002d0 <getKeyInput+0xf8>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	4923      	ldr	r1, [pc, #140]	; (80002d4 <getKeyInput+0xfc>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[but] == PRESSED_STATE){
 800024e:	4a20      	ldr	r2, [pc, #128]	; (80002d0 <getKeyInput+0xf8>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d129      	bne.n	80002ae <getKeyInput+0xd6>
					//TODO
					button_flag[but] = 1;
 800025a:	4a1f      	ldr	r2, [pc, #124]	; (80002d8 <getKeyInput+0x100>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2101      	movs	r1, #1
 8000260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[but] = TIME_INTO_LONG_PRESSED;
 8000264:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <getKeyInput+0x104>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	21c8      	movs	r1, #200	; 0xc8
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026e:	e01e      	b.n	80002ae <getKeyInput+0xd6>
					}
				}
				// Nháº¥n ÄÃ¨
				else{
					if(KeyReg2[but] == PRESSED_STATE){
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <getKeyInput+0xf8>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d118      	bne.n	80002ae <getKeyInput+0xd6>
						TimerForKeyPress[but] --;
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <getKeyInput+0x104>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	1e5a      	subs	r2, r3, #1
 8000286:	4915      	ldr	r1, [pc, #84]	; (80002dc <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if(TimerForKeyPress[but] == 0){
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <getKeyInput+0x104>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d109      	bne.n	80002ae <getKeyInput+0xd6>
							button_flag[but] = 1;
 800029a:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <getKeyInput+0x100>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2101      	movs	r1, #1
 80002a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							TimerForKeyPress[but] = TIME_INTO_LONG_PRESSED;
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <getKeyInput+0x104>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	21c8      	movs	r1, #200	; 0xc8
 80002aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int but = 0; but < 3; but ++){
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	dda3      	ble.n	8000202 <getKeyInput+0x2a>
						}
					}
				}
		}
	}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40010800 	.word	0x40010800
 80002c8:	20000000 	.word	0x20000000
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	20000018 	.word	0x20000018
 80002d4:	20000024 	.word	0x20000024
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	20000030 	.word	0x20000030

080002e0 <fsm_automatic_run>:
 *      Author: Admin
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (STATUS_MODE != MODE1) return;
 80002e4:	4b9c      	ldr	r3, [pc, #624]	; (8000558 <fsm_automatic_run+0x278>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b16      	cmp	r3, #22
 80002ea:	f040 812a 	bne.w	8000542 <fsm_automatic_run+0x262>
	//
	if (TimeRed != TimeYellow + TimeGreen) {
 80002ee:	4b9b      	ldr	r3, [pc, #620]	; (800055c <fsm_automatic_run+0x27c>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b9b      	ldr	r3, [pc, #620]	; (8000560 <fsm_automatic_run+0x280>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	441a      	add	r2, r3
 80002f8:	4b9a      	ldr	r3, [pc, #616]	; (8000564 <fsm_automatic_run+0x284>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d008      	beq.n	8000312 <fsm_automatic_run+0x32>
        TimeRed = 5;
 8000300:	4b98      	ldr	r3, [pc, #608]	; (8000564 <fsm_automatic_run+0x284>)
 8000302:	2205      	movs	r2, #5
 8000304:	601a      	str	r2, [r3, #0]
        TimeYellow = 2;
 8000306:	4b95      	ldr	r3, [pc, #596]	; (800055c <fsm_automatic_run+0x27c>)
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
        TimeGreen = 3;
 800030c:	4b94      	ldr	r3, [pc, #592]	; (8000560 <fsm_automatic_run+0x280>)
 800030e:	2203      	movs	r2, #3
 8000310:	601a      	str	r2, [r3, #0]
    }

	switch(STATUS_LED1){
 8000312:	4b95      	ldr	r3, [pc, #596]	; (8000568 <fsm_automatic_run+0x288>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	2b03      	cmp	r3, #3
 800031a:	d87d      	bhi.n	8000418 <fsm_automatic_run+0x138>
 800031c:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <fsm_automatic_run+0x44>)
 800031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000322:	bf00      	nop
 8000324:	08000335 	.word	0x08000335
 8000328:	08000353 	.word	0x08000353
 800032c:	080003d7 	.word	0x080003d7
 8000330:	08000395 	.word	0x08000395
	case INIT:
		OffAll1();
 8000334:	f001 f984 	bl	8001640 <OffAll1>

		STATUS_LED1 = AUTO_RED1;
 8000338:	4b8b      	ldr	r3, [pc, #556]	; (8000568 <fsm_automatic_run+0x288>)
 800033a:	2202      	movs	r2, #2
 800033c:	601a      	str	r2, [r3, #0]
		TimeForLed1 = TimeRed;
 800033e:	4b89      	ldr	r3, [pc, #548]	; (8000564 <fsm_automatic_run+0x284>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a8a      	ldr	r2, [pc, #552]	; (800056c <fsm_automatic_run+0x28c>)
 8000344:	6013      	str	r3, [r2, #0]
		setTimer(2, 1000);
 8000346:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800034a:	2002      	movs	r0, #2
 800034c:	f001 f89a 	bl	8001484 <setTimer>
		break;
 8000350:	e069      	b.n	8000426 <fsm_automatic_run+0x146>
	case AUTO_RED1:
		OnLedRed1();
 8000352:	f001 f9a5 	bl	80016a0 <OnLedRed1>

	    updateBuffer(MODE1);
 8000356:	2016      	movs	r0, #22
 8000358:	f000 fc8e 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800035c:	f000 fd44 	bl	8000de8 <display_led7seg>

		if(timer_flag[2] == 1){
 8000360:	4b83      	ldr	r3, [pc, #524]	; (8000570 <fsm_automatic_run+0x290>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d159      	bne.n	800041c <fsm_automatic_run+0x13c>
			setTimer(2, 1000);
 8000368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800036c:	2002      	movs	r0, #2
 800036e:	f001 f889 	bl	8001484 <setTimer>
			TimeForLed1 --;
 8000372:	4b7e      	ldr	r3, [pc, #504]	; (800056c <fsm_automatic_run+0x28c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3b01      	subs	r3, #1
 8000378:	4a7c      	ldr	r2, [pc, #496]	; (800056c <fsm_automatic_run+0x28c>)
 800037a:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 800037c:	4b7b      	ldr	r3, [pc, #492]	; (800056c <fsm_automatic_run+0x28c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	dc4b      	bgt.n	800041c <fsm_automatic_run+0x13c>
				TimeForLed1 = TimeGreen;
 8000384:	4b76      	ldr	r3, [pc, #472]	; (8000560 <fsm_automatic_run+0x280>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a78      	ldr	r2, [pc, #480]	; (800056c <fsm_automatic_run+0x28c>)
 800038a:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_GREEN1;
 800038c:	4b76      	ldr	r3, [pc, #472]	; (8000568 <fsm_automatic_run+0x288>)
 800038e:	2204      	movs	r2, #4
 8000390:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000392:	e043      	b.n	800041c <fsm_automatic_run+0x13c>
	case AUTO_GREEN1:
		OnLedGreen1();
 8000394:	f001 f9e4 	bl	8001760 <OnLedGreen1>

	    updateBuffer(MODE1);
 8000398:	2016      	movs	r0, #22
 800039a:	f000 fc6d 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800039e:	f000 fd23 	bl	8000de8 <display_led7seg>

		if(timer_flag[2] == 1){
 80003a2:	4b73      	ldr	r3, [pc, #460]	; (8000570 <fsm_automatic_run+0x290>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d13a      	bne.n	8000420 <fsm_automatic_run+0x140>
			setTimer(2, 1000);
 80003aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ae:	2002      	movs	r0, #2
 80003b0:	f001 f868 	bl	8001484 <setTimer>
			TimeForLed1 --;
 80003b4:	4b6d      	ldr	r3, [pc, #436]	; (800056c <fsm_automatic_run+0x28c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	4a6c      	ldr	r2, [pc, #432]	; (800056c <fsm_automatic_run+0x28c>)
 80003bc:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 80003be:	4b6b      	ldr	r3, [pc, #428]	; (800056c <fsm_automatic_run+0x28c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dc2c      	bgt.n	8000420 <fsm_automatic_run+0x140>
				TimeForLed1 = TimeYellow;
 80003c6:	4b65      	ldr	r3, [pc, #404]	; (800055c <fsm_automatic_run+0x27c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a68      	ldr	r2, [pc, #416]	; (800056c <fsm_automatic_run+0x28c>)
 80003cc:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_YELLOW1;
 80003ce:	4b66      	ldr	r3, [pc, #408]	; (8000568 <fsm_automatic_run+0x288>)
 80003d0:	2203      	movs	r2, #3
 80003d2:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80003d4:	e024      	b.n	8000420 <fsm_automatic_run+0x140>
	case AUTO_YELLOW1:
		OnLedYellow1();
 80003d6:	f001 f993 	bl	8001700 <OnLedYellow1>

	    updateBuffer(MODE1);
 80003da:	2016      	movs	r0, #22
 80003dc:	f000 fc4c 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 80003e0:	f000 fd02 	bl	8000de8 <display_led7seg>

		if(timer_flag[2] == 1){
 80003e4:	4b62      	ldr	r3, [pc, #392]	; (8000570 <fsm_automatic_run+0x290>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d11b      	bne.n	8000424 <fsm_automatic_run+0x144>
			setTimer(2, 1000);
 80003ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003f0:	2002      	movs	r0, #2
 80003f2:	f001 f847 	bl	8001484 <setTimer>
			TimeForLed1 --;
 80003f6:	4b5d      	ldr	r3, [pc, #372]	; (800056c <fsm_automatic_run+0x28c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a5b      	ldr	r2, [pc, #364]	; (800056c <fsm_automatic_run+0x28c>)
 80003fe:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 8000400:	4b5a      	ldr	r3, [pc, #360]	; (800056c <fsm_automatic_run+0x28c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	dc0d      	bgt.n	8000424 <fsm_automatic_run+0x144>
				TimeForLed1 = TimeRed;
 8000408:	4b56      	ldr	r3, [pc, #344]	; (8000564 <fsm_automatic_run+0x284>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a57      	ldr	r2, [pc, #348]	; (800056c <fsm_automatic_run+0x28c>)
 800040e:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_RED1;
 8000410:	4b55      	ldr	r3, [pc, #340]	; (8000568 <fsm_automatic_run+0x288>)
 8000412:	2202      	movs	r2, #2
 8000414:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000416:	e005      	b.n	8000424 <fsm_automatic_run+0x144>
	default:
		break;
 8000418:	bf00      	nop
 800041a:	e004      	b.n	8000426 <fsm_automatic_run+0x146>
		break;
 800041c:	bf00      	nop
 800041e:	e002      	b.n	8000426 <fsm_automatic_run+0x146>
		break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <fsm_automatic_run+0x146>
		break;
 8000424:	bf00      	nop
	}
	//
	switch(STATUS_LED2){
 8000426:	4b53      	ldr	r3, [pc, #332]	; (8000574 <fsm_automatic_run+0x294>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	2b06      	cmp	r3, #6
 800042e:	f200 808a 	bhi.w	8000546 <fsm_automatic_run+0x266>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <fsm_automatic_run+0x158>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000455 	.word	0x08000455
 800043c:	08000547 	.word	0x08000547
 8000440:	08000547 	.word	0x08000547
 8000444:	08000547 	.word	0x08000547
 8000448:	0800047d 	.word	0x0800047d
 800044c:	08000501 	.word	0x08000501
 8000450:	080004bf 	.word	0x080004bf
	case INIT:
		OffAll2();
 8000454:	f001 f90c 	bl	8001670 <OffAll2>

	    updateBuffer(MODE1);
 8000458:	2016      	movs	r0, #22
 800045a:	f000 fc0d 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800045e:	f000 fcc3 	bl	8000de8 <display_led7seg>

		STATUS_LED2 = AUTO_GREEN2;
 8000462:	4b44      	ldr	r3, [pc, #272]	; (8000574 <fsm_automatic_run+0x294>)
 8000464:	2207      	movs	r2, #7
 8000466:	601a      	str	r2, [r3, #0]
		TimeForLed2 = TimeGreen;
 8000468:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <fsm_automatic_run+0x280>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a42      	ldr	r2, [pc, #264]	; (8000578 <fsm_automatic_run+0x298>)
 800046e:	6013      	str	r3, [r2, #0]
		setTimer(3, 1000);
 8000470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000474:	2003      	movs	r0, #3
 8000476:	f001 f805 	bl	8001484 <setTimer>
		break;
 800047a:	e06b      	b.n	8000554 <fsm_automatic_run+0x274>
	case AUTO_RED2:
		OnLedRed2();
 800047c:	f001 f928 	bl	80016d0 <OnLedRed2>

	    updateBuffer(MODE1);
 8000480:	2016      	movs	r0, #22
 8000482:	f000 fbf9 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 8000486:	f000 fcaf 	bl	8000de8 <display_led7seg>

		if(timer_flag[3] == 1){
 800048a:	4b39      	ldr	r3, [pc, #228]	; (8000570 <fsm_automatic_run+0x290>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d15b      	bne.n	800054a <fsm_automatic_run+0x26a>
			setTimer(3, 1000);
 8000492:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000496:	2003      	movs	r0, #3
 8000498:	f000 fff4 	bl	8001484 <setTimer>
			TimeForLed2 --;
 800049c:	4b36      	ldr	r3, [pc, #216]	; (8000578 <fsm_automatic_run+0x298>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a35      	ldr	r2, [pc, #212]	; (8000578 <fsm_automatic_run+0x298>)
 80004a4:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <fsm_automatic_run+0x298>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	dc4d      	bgt.n	800054a <fsm_automatic_run+0x26a>
				TimeForLed2 = TimeGreen;
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <fsm_automatic_run+0x280>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <fsm_automatic_run+0x298>)
 80004b4:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_GREEN2;
 80004b6:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <fsm_automatic_run+0x294>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004bc:	e045      	b.n	800054a <fsm_automatic_run+0x26a>
	case AUTO_GREEN2:
		OnLedGreen2();
 80004be:	f001 f967 	bl	8001790 <OnLedGreen2>

	    updateBuffer(MODE1);
 80004c2:	2016      	movs	r0, #22
 80004c4:	f000 fbd8 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 80004c8:	f000 fc8e 	bl	8000de8 <display_led7seg>

		if(timer_flag[3] == 1){
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <fsm_automatic_run+0x290>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d13c      	bne.n	800054e <fsm_automatic_run+0x26e>
			setTimer(3, 1000);
 80004d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d8:	2003      	movs	r0, #3
 80004da:	f000 ffd3 	bl	8001484 <setTimer>
			TimeForLed2 --;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <fsm_automatic_run+0x298>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	4a24      	ldr	r2, [pc, #144]	; (8000578 <fsm_automatic_run+0x298>)
 80004e6:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <fsm_automatic_run+0x298>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dc2e      	bgt.n	800054e <fsm_automatic_run+0x26e>
				TimeForLed2 = TimeYellow;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <fsm_automatic_run+0x27c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a20      	ldr	r2, [pc, #128]	; (8000578 <fsm_automatic_run+0x298>)
 80004f6:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_YELLOW2;
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <fsm_automatic_run+0x294>)
 80004fa:	2206      	movs	r2, #6
 80004fc:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004fe:	e026      	b.n	800054e <fsm_automatic_run+0x26e>
	case AUTO_YELLOW2:
		OnLedYellow2();
 8000500:	f001 f916 	bl	8001730 <OnLedYellow2>

	    updateBuffer(MODE1);
 8000504:	2016      	movs	r0, #22
 8000506:	f000 fbb7 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800050a:	f000 fc6d 	bl	8000de8 <display_led7seg>

		if(timer_flag[3] == 1){
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <fsm_automatic_run+0x290>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d11d      	bne.n	8000552 <fsm_automatic_run+0x272>
			setTimer(3, 1000);
 8000516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051a:	2003      	movs	r0, #3
 800051c:	f000 ffb2 	bl	8001484 <setTimer>
			TimeForLed2 --;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <fsm_automatic_run+0x298>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <fsm_automatic_run+0x298>)
 8000528:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <fsm_automatic_run+0x298>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dc0f      	bgt.n	8000552 <fsm_automatic_run+0x272>
				TimeForLed2 = TimeRed;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <fsm_automatic_run+0x284>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <fsm_automatic_run+0x298>)
 8000538:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_RED2;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <fsm_automatic_run+0x294>)
 800053c:	2205      	movs	r2, #5
 800053e:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000540:	e007      	b.n	8000552 <fsm_automatic_run+0x272>
	if (STATUS_MODE != MODE1) return;
 8000542:	bf00      	nop
 8000544:	e006      	b.n	8000554 <fsm_automatic_run+0x274>
	default:
		break;
 8000546:	bf00      	nop
 8000548:	e004      	b.n	8000554 <fsm_automatic_run+0x274>
		break;
 800054a:	bf00      	nop
 800054c:	e002      	b.n	8000554 <fsm_automatic_run+0x274>
		break;
 800054e:	bf00      	nop
 8000550:	e000      	b.n	8000554 <fsm_automatic_run+0x274>
		break;
 8000552:	bf00      	nop
	}
}
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000048 	.word	0x20000048
 800055c:	20000058 	.word	0x20000058
 8000560:	20000054 	.word	0x20000054
 8000564:	20000050 	.word	0x20000050
 8000568:	2000003c 	.word	0x2000003c
 800056c:	2000005c 	.word	0x2000005c
 8000570:	200000c4 	.word	0x200000c4
 8000574:	20000040 	.word	0x20000040
 8000578:	20000060 	.word	0x20000060

0800057c <fsm_manual_run>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 8000580:	4b33      	ldr	r3, [pc, #204]	; (8000650 <fsm_manual_run+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b19      	cmp	r3, #25
 8000586:	d03e      	beq.n	8000606 <fsm_manual_run+0x8a>
 8000588:	2b19      	cmp	r3, #25
 800058a:	dc58      	bgt.n	800063e <fsm_manual_run+0xc2>
 800058c:	2b17      	cmp	r3, #23
 800058e:	d002      	beq.n	8000596 <fsm_manual_run+0x1a>
 8000590:	2b18      	cmp	r3, #24
 8000592:	d01c      	beq.n	80005ce <fsm_manual_run+0x52>
		if(isButtonPressed(1)){
			value = (value < 99) ? value + 1 : 1;
		}
		break;
	default:
		break;
 8000594:	e053      	b.n	800063e <fsm_manual_run+0xc2>
		BlinkyLed(RED);
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f001 f942 	bl	8001820 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <fsm_manual_run+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fb69 	bl	8000c78 <updateBuffer>
		display_led7seg();
 80005a6:	f000 fc1f 	bl	8000de8 <display_led7seg>
		if(isButtonPressed(1)){
 80005aa:	2001      	movs	r0, #1
 80005ac:	f7ff fdfa 	bl	80001a4 <isButtonPressed>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d045      	beq.n	8000642 <fsm_manual_run+0xc6>
			value = (value < 99) ? value + 1 : 1;
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <fsm_manual_run+0xd8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b62      	cmp	r3, #98	; 0x62
 80005bc:	dc03      	bgt.n	80005c6 <fsm_manual_run+0x4a>
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <fsm_manual_run+0xd8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	e000      	b.n	80005c8 <fsm_manual_run+0x4c>
 80005c6:	2301      	movs	r3, #1
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <fsm_manual_run+0xd8>)
 80005ca:	6013      	str	r3, [r2, #0]
		break;
 80005cc:	e039      	b.n	8000642 <fsm_manual_run+0xc6>
		BlinkyLed(YELLOW);
 80005ce:	2029      	movs	r0, #41	; 0x29
 80005d0:	f001 f926 	bl	8001820 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <fsm_manual_run+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb4d 	bl	8000c78 <updateBuffer>
		display_led7seg();
 80005de:	f000 fc03 	bl	8000de8 <display_led7seg>
		if(isButtonPressed(1)){
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff fdde 	bl	80001a4 <isButtonPressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d02b      	beq.n	8000646 <fsm_manual_run+0xca>
			value = (value < 99) ? value + 1 : 1;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <fsm_manual_run+0xd8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b62      	cmp	r3, #98	; 0x62
 80005f4:	dc03      	bgt.n	80005fe <fsm_manual_run+0x82>
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <fsm_manual_run+0xd8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	e000      	b.n	8000600 <fsm_manual_run+0x84>
 80005fe:	2301      	movs	r3, #1
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <fsm_manual_run+0xd8>)
 8000602:	6013      	str	r3, [r2, #0]
		break;
 8000604:	e01f      	b.n	8000646 <fsm_manual_run+0xca>
		BlinkyLed(GREEN);
 8000606:	202a      	movs	r0, #42	; 0x2a
 8000608:	f001 f90a 	bl	8001820 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <fsm_manual_run+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fb31 	bl	8000c78 <updateBuffer>
		display_led7seg();
 8000616:	f000 fbe7 	bl	8000de8 <display_led7seg>
		if(isButtonPressed(1)){
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fdc2 	bl	80001a4 <isButtonPressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d011      	beq.n	800064a <fsm_manual_run+0xce>
			value = (value < 99) ? value + 1 : 1;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <fsm_manual_run+0xd8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b62      	cmp	r3, #98	; 0x62
 800062c:	dc03      	bgt.n	8000636 <fsm_manual_run+0xba>
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <fsm_manual_run+0xd8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	e000      	b.n	8000638 <fsm_manual_run+0xbc>
 8000636:	2301      	movs	r3, #1
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <fsm_manual_run+0xd8>)
 800063a:	6013      	str	r3, [r2, #0]
		break;
 800063c:	e005      	b.n	800064a <fsm_manual_run+0xce>
		break;
 800063e:	bf00      	nop
 8000640:	e004      	b.n	800064c <fsm_manual_run+0xd0>
		break;
 8000642:	bf00      	nop
 8000644:	e002      	b.n	800064c <fsm_manual_run+0xd0>
		break;
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <fsm_manual_run+0xd0>
		break;
 800064a:	bf00      	nop
	}
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000048 	.word	0x20000048
 8000654:	200000a8 	.word	0x200000a8

08000658 <fsm_setting_run>:
 *      Author: Admin
 */

#include "fsm_setting.h"

void fsm_setting_run(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <fsm_setting_run+0x170>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b18      	cmp	r3, #24
 8000664:	f200 80a4 	bhi.w	80007b0 <fsm_setting_run+0x158>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <fsm_setting_run+0x18>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006d5 	.word	0x080006d5
 8000674:	080007b1 	.word	0x080007b1
 8000678:	080007b1 	.word	0x080007b1
 800067c:	080007b1 	.word	0x080007b1
 8000680:	080007b1 	.word	0x080007b1
 8000684:	080007b1 	.word	0x080007b1
 8000688:	080007b1 	.word	0x080007b1
 800068c:	080007b1 	.word	0x080007b1
 8000690:	080007b1 	.word	0x080007b1
 8000694:	080007b1 	.word	0x080007b1
 8000698:	080007b1 	.word	0x080007b1
 800069c:	080007b1 	.word	0x080007b1
 80006a0:	080007b1 	.word	0x080007b1
 80006a4:	080007b1 	.word	0x080007b1
 80006a8:	080007b1 	.word	0x080007b1
 80006ac:	080007b1 	.word	0x080007b1
 80006b0:	080007b1 	.word	0x080007b1
 80006b4:	080007b1 	.word	0x080007b1
 80006b8:	080007b1 	.word	0x080007b1
 80006bc:	080007b1 	.word	0x080007b1
 80006c0:	080007b1 	.word	0x080007b1
 80006c4:	080006dd 	.word	0x080006dd
 80006c8:	080006ff 	.word	0x080006ff
 80006cc:	08000737 	.word	0x08000737
 80006d0:	0800076f 	.word	0x0800076f
	case INIT:
		STATUS_MODE = MODE1;
 80006d4:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <fsm_setting_run+0x170>)
 80006d6:	2216      	movs	r2, #22
 80006d8:	601a      	str	r2, [r3, #0]
		break;
 80006da:	e072      	b.n	80007c2 <fsm_setting_run+0x16a>
	case MODE1:
		if(isButtonPressed(0)){
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fd61 	bl	80001a4 <isButtonPressed>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d065      	beq.n	80007b4 <fsm_setting_run+0x15c>
			STATUS_MODE = MODE2;
 80006e8:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <fsm_setting_run+0x170>)
 80006ea:	2217      	movs	r2, #23
 80006ec:	601a      	str	r2, [r3, #0]
			value = TimeRed;
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <fsm_setting_run+0x174>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a37      	ldr	r2, [pc, #220]	; (80007d0 <fsm_setting_run+0x178>)
 80006f4:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <fsm_setting_run+0x17c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
		}
		break;
 80006fc:	e05a      	b.n	80007b4 <fsm_setting_run+0x15c>
	case MODE2:
		if(isButtonPressed(0)){
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd50 	bl	80001a4 <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00a      	beq.n	8000720 <fsm_setting_run+0xc8>
			STATUS_MODE = MODE3;
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <fsm_setting_run+0x170>)
 800070c:	2218      	movs	r2, #24
 800070e:	601a      	str	r2, [r3, #0]
			value = TimeYellow;
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <fsm_setting_run+0x180>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <fsm_setting_run+0x178>)
 8000716:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <fsm_setting_run+0x17c>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeRed = value;
		}
		break;
 800071e:	e04b      	b.n	80007b8 <fsm_setting_run+0x160>
		else if(isButtonPressed(2)){
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fd3f 	bl	80001a4 <isButtonPressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d045      	beq.n	80007b8 <fsm_setting_run+0x160>
			TimeRed = value;
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <fsm_setting_run+0x178>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a26      	ldr	r2, [pc, #152]	; (80007cc <fsm_setting_run+0x174>)
 8000732:	6013      	str	r3, [r2, #0]
		break;
 8000734:	e040      	b.n	80007b8 <fsm_setting_run+0x160>
	case MODE3:
		if(isButtonPressed(0)){
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fd34 	bl	80001a4 <isButtonPressed>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00a      	beq.n	8000758 <fsm_setting_run+0x100>
			STATUS_MODE = MODE4;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <fsm_setting_run+0x170>)
 8000744:	2219      	movs	r2, #25
 8000746:	601a      	str	r2, [r3, #0]
			value = TimeGreen;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <fsm_setting_run+0x184>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <fsm_setting_run+0x178>)
 800074e:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <fsm_setting_run+0x17c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeYellow = value;
		}
		break;
 8000756:	e031      	b.n	80007bc <fsm_setting_run+0x164>
		else if(isButtonPressed(2)){
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fd23 	bl	80001a4 <isButtonPressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02b      	beq.n	80007bc <fsm_setting_run+0x164>
			TimeYellow = value;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <fsm_setting_run+0x178>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <fsm_setting_run+0x180>)
 800076a:	6013      	str	r3, [r2, #0]
		break;
 800076c:	e026      	b.n	80007bc <fsm_setting_run+0x164>
	case MODE4:
		if(isButtonPressed(0)){
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fd18 	bl	80001a4 <isButtonPressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00f      	beq.n	800079a <fsm_setting_run+0x142>
			STATUS_MODE = MODE1;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <fsm_setting_run+0x170>)
 800077c:	2216      	movs	r2, #22
 800077e:	601a      	str	r2, [r3, #0]

			STATUS_LED1 = INIT;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <fsm_setting_run+0x188>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
			STATUS_LED2 = INIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <fsm_setting_run+0x18c>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
			STATUS_7SEG = INIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <fsm_setting_run+0x190>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]

			STATUS_BLINKY = INIT;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <fsm_setting_run+0x17c>)
 8000794:	2201      	movs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeGreen = value;
		}
		break;
 8000798:	e012      	b.n	80007c0 <fsm_setting_run+0x168>
		else if(isButtonPressed(2)){
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff fd02 	bl	80001a4 <isButtonPressed>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00c      	beq.n	80007c0 <fsm_setting_run+0x168>
			TimeGreen = value;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <fsm_setting_run+0x178>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <fsm_setting_run+0x184>)
 80007ac:	6013      	str	r3, [r2, #0]
		break;
 80007ae:	e007      	b.n	80007c0 <fsm_setting_run+0x168>
	default:
		break;
 80007b0:	bf00      	nop
 80007b2:	e006      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007b4:	bf00      	nop
 80007b6:	e004      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007b8:	bf00      	nop
 80007ba:	e002      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007bc:	bf00      	nop
 80007be:	e000      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007c0:	bf00      	nop
	}


}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000048 	.word	0x20000048
 80007cc:	20000050 	.word	0x20000050
 80007d0:	200000a8 	.word	0x200000a8
 80007d4:	2000004c 	.word	0x2000004c
 80007d8:	20000058 	.word	0x20000058
 80007dc:	20000054 	.word	0x20000054
 80007e0:	2000003c 	.word	0x2000003c
 80007e4:	20000040 	.word	0x20000040
 80007e8:	20000044 	.word	0x20000044

080007ec <display7SEG>:
 *      Author: Admin
 */

#include "led7_segment.h"

void display7SEG(int num){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	f200 819e 	bhi.w	8000b38 <display7SEG+0x34c>
 80007fc:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <display7SEG+0x18>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	0800082d 	.word	0x0800082d
 8000808:	0800087b 	.word	0x0800087b
 800080c:	080008c9 	.word	0x080008c9
 8000810:	08000917 	.word	0x08000917
 8000814:	08000965 	.word	0x08000965
 8000818:	080009b3 	.word	0x080009b3
 800081c:	08000a01 	.word	0x08000a01
 8000820:	08000a4f 	.word	0x08000a4f
 8000824:	08000a9d 	.word	0x08000a9d
 8000828:	08000aeb 	.word	0x08000aeb
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	48c4      	ldr	r0, [pc, #784]	; (8000b44 <display7SEG+0x358>)
 8000834:	f001 fb87 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	48c1      	ldr	r0, [pc, #772]	; (8000b44 <display7SEG+0x358>)
 8000840:	f001 fb81 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	48be      	ldr	r0, [pc, #760]	; (8000b44 <display7SEG+0x358>)
 800084c:	f001 fb7b 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	48bc      	ldr	r0, [pc, #752]	; (8000b48 <display7SEG+0x35c>)
 8000856:	f001 fb76 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2102      	movs	r1, #2
 800085e:	48ba      	ldr	r0, [pc, #744]	; (8000b48 <display7SEG+0x35c>)
 8000860:	f001 fb71 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	48b7      	ldr	r0, [pc, #732]	; (8000b48 <display7SEG+0x35c>)
 800086a:	f001 fb6c 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2108      	movs	r1, #8
 8000872:	48b5      	ldr	r0, [pc, #724]	; (8000b48 <display7SEG+0x35c>)
 8000874:	f001 fb67 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000878:	e15f      	b.n	8000b3a <display7SEG+0x34e>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	48b0      	ldr	r0, [pc, #704]	; (8000b44 <display7SEG+0x358>)
 8000882:	f001 fb60 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088c:	48ad      	ldr	r0, [pc, #692]	; (8000b44 <display7SEG+0x358>)
 800088e:	f001 fb5a 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000898:	48aa      	ldr	r0, [pc, #680]	; (8000b44 <display7SEG+0x358>)
 800089a:	f001 fb54 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2101      	movs	r1, #1
 80008a2:	48a9      	ldr	r0, [pc, #676]	; (8000b48 <display7SEG+0x35c>)
 80008a4:	f001 fb4f 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2102      	movs	r1, #2
 80008ac:	48a6      	ldr	r0, [pc, #664]	; (8000b48 <display7SEG+0x35c>)
 80008ae:	f001 fb4a 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2104      	movs	r1, #4
 80008b6:	48a4      	ldr	r0, [pc, #656]	; (8000b48 <display7SEG+0x35c>)
 80008b8:	f001 fb45 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2108      	movs	r1, #8
 80008c0:	48a1      	ldr	r0, [pc, #644]	; (8000b48 <display7SEG+0x35c>)
 80008c2:	f001 fb40 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 80008c6:	e138      	b.n	8000b3a <display7SEG+0x34e>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	489d      	ldr	r0, [pc, #628]	; (8000b44 <display7SEG+0x358>)
 80008d0:	f001 fb39 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008da:	489a      	ldr	r0, [pc, #616]	; (8000b44 <display7SEG+0x358>)
 80008dc:	f001 fb33 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e6:	4897      	ldr	r0, [pc, #604]	; (8000b44 <display7SEG+0x358>)
 80008e8:	f001 fb2d 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	4895      	ldr	r0, [pc, #596]	; (8000b48 <display7SEG+0x35c>)
 80008f2:	f001 fb28 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4893      	ldr	r0, [pc, #588]	; (8000b48 <display7SEG+0x35c>)
 80008fc:	f001 fb23 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2104      	movs	r1, #4
 8000904:	4890      	ldr	r0, [pc, #576]	; (8000b48 <display7SEG+0x35c>)
 8000906:	f001 fb1e 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	488e      	ldr	r0, [pc, #568]	; (8000b48 <display7SEG+0x35c>)
 8000910:	f001 fb19 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000914:	e111      	b.n	8000b3a <display7SEG+0x34e>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4889      	ldr	r0, [pc, #548]	; (8000b44 <display7SEG+0x358>)
 800091e:	f001 fb12 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4886      	ldr	r0, [pc, #536]	; (8000b44 <display7SEG+0x358>)
 800092a:	f001 fb0c 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000934:	4883      	ldr	r0, [pc, #524]	; (8000b44 <display7SEG+0x358>)
 8000936:	f001 fb06 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	4882      	ldr	r0, [pc, #520]	; (8000b48 <display7SEG+0x35c>)
 8000940:	f001 fb01 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2102      	movs	r1, #2
 8000948:	487f      	ldr	r0, [pc, #508]	; (8000b48 <display7SEG+0x35c>)
 800094a:	f001 fafc 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	487d      	ldr	r0, [pc, #500]	; (8000b48 <display7SEG+0x35c>)
 8000954:	f001 faf7 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	487a      	ldr	r0, [pc, #488]	; (8000b48 <display7SEG+0x35c>)
 800095e:	f001 faf2 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000962:	e0ea      	b.n	8000b3a <display7SEG+0x34e>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	4876      	ldr	r0, [pc, #472]	; (8000b44 <display7SEG+0x358>)
 800096c:	f001 faeb 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	4873      	ldr	r0, [pc, #460]	; (8000b44 <display7SEG+0x358>)
 8000978:	f001 fae5 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	4870      	ldr	r0, [pc, #448]	; (8000b44 <display7SEG+0x358>)
 8000984:	f001 fadf 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	486e      	ldr	r0, [pc, #440]	; (8000b48 <display7SEG+0x35c>)
 800098e:	f001 fada 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2102      	movs	r1, #2
 8000996:	486c      	ldr	r0, [pc, #432]	; (8000b48 <display7SEG+0x35c>)
 8000998:	f001 fad5 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	4869      	ldr	r0, [pc, #420]	; (8000b48 <display7SEG+0x35c>)
 80009a2:	f001 fad0 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	4867      	ldr	r0, [pc, #412]	; (8000b48 <display7SEG+0x35c>)
 80009ac:	f001 facb 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 80009b0:	e0c3      	b.n	8000b3a <display7SEG+0x34e>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b8:	4862      	ldr	r0, [pc, #392]	; (8000b44 <display7SEG+0x358>)
 80009ba:	f001 fac4 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c4:	485f      	ldr	r0, [pc, #380]	; (8000b44 <display7SEG+0x358>)
 80009c6:	f001 fabe 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d0:	485c      	ldr	r0, [pc, #368]	; (8000b44 <display7SEG+0x358>)
 80009d2:	f001 fab8 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	485b      	ldr	r0, [pc, #364]	; (8000b48 <display7SEG+0x35c>)
 80009dc:	f001 fab3 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2102      	movs	r1, #2
 80009e4:	4858      	ldr	r0, [pc, #352]	; (8000b48 <display7SEG+0x35c>)
 80009e6:	f001 faae 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2104      	movs	r1, #4
 80009ee:	4856      	ldr	r0, [pc, #344]	; (8000b48 <display7SEG+0x35c>)
 80009f0:	f001 faa9 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	4853      	ldr	r0, [pc, #332]	; (8000b48 <display7SEG+0x35c>)
 80009fa:	f001 faa4 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 80009fe:	e09c      	b.n	8000b3a <display7SEG+0x34e>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	484f      	ldr	r0, [pc, #316]	; (8000b44 <display7SEG+0x358>)
 8000a08:	f001 fa9d 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	484c      	ldr	r0, [pc, #304]	; (8000b44 <display7SEG+0x358>)
 8000a14:	f001 fa97 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	4849      	ldr	r0, [pc, #292]	; (8000b44 <display7SEG+0x358>)
 8000a20:	f001 fa91 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	4847      	ldr	r0, [pc, #284]	; (8000b48 <display7SEG+0x35c>)
 8000a2a:	f001 fa8c 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4845      	ldr	r0, [pc, #276]	; (8000b48 <display7SEG+0x35c>)
 8000a34:	f001 fa87 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4842      	ldr	r0, [pc, #264]	; (8000b48 <display7SEG+0x35c>)
 8000a3e:	f001 fa82 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2108      	movs	r1, #8
 8000a46:	4840      	ldr	r0, [pc, #256]	; (8000b48 <display7SEG+0x35c>)
 8000a48:	f001 fa7d 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000a4c:	e075      	b.n	8000b3a <display7SEG+0x34e>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	483b      	ldr	r0, [pc, #236]	; (8000b44 <display7SEG+0x358>)
 8000a56:	f001 fa76 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	4838      	ldr	r0, [pc, #224]	; (8000b44 <display7SEG+0x358>)
 8000a62:	f001 fa70 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	4835      	ldr	r0, [pc, #212]	; (8000b44 <display7SEG+0x358>)
 8000a6e:	f001 fa6a 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2101      	movs	r1, #1
 8000a76:	4834      	ldr	r0, [pc, #208]	; (8000b48 <display7SEG+0x35c>)
 8000a78:	f001 fa65 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4831      	ldr	r0, [pc, #196]	; (8000b48 <display7SEG+0x35c>)
 8000a82:	f001 fa60 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2104      	movs	r1, #4
 8000a8a:	482f      	ldr	r0, [pc, #188]	; (8000b48 <display7SEG+0x35c>)
 8000a8c:	f001 fa5b 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2108      	movs	r1, #8
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <display7SEG+0x35c>)
 8000a96:	f001 fa56 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000a9a:	e04e      	b.n	8000b3a <display7SEG+0x34e>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	4828      	ldr	r0, [pc, #160]	; (8000b44 <display7SEG+0x358>)
 8000aa4:	f001 fa4f 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aae:	4825      	ldr	r0, [pc, #148]	; (8000b44 <display7SEG+0x358>)
 8000ab0:	f001 fa49 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	4822      	ldr	r0, [pc, #136]	; (8000b44 <display7SEG+0x358>)
 8000abc:	f001 fa43 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4820      	ldr	r0, [pc, #128]	; (8000b48 <display7SEG+0x35c>)
 8000ac6:	f001 fa3e 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <display7SEG+0x35c>)
 8000ad0:	f001 fa39 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	481b      	ldr	r0, [pc, #108]	; (8000b48 <display7SEG+0x35c>)
 8000ada:	f001 fa34 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <display7SEG+0x35c>)
 8000ae4:	f001 fa2f 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000ae8:	e027      	b.n	8000b3a <display7SEG+0x34e>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	4814      	ldr	r0, [pc, #80]	; (8000b44 <display7SEG+0x358>)
 8000af2:	f001 fa28 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <display7SEG+0x358>)
 8000afe:	f001 fa22 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <display7SEG+0x358>)
 8000b0a:	f001 fa1c 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2101      	movs	r1, #1
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <display7SEG+0x35c>)
 8000b14:	f001 fa17 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <display7SEG+0x35c>)
 8000b1e:	f001 fa12 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <display7SEG+0x35c>)
 8000b28:	f001 fa0d 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <display7SEG+0x35c>)
 8000b32:	f001 fa08 	bl	8001f46 <HAL_GPIO_WritePin>
		break;
 8000b36:	e000      	b.n	8000b3a <display7SEG+0x34e>
	default:
		break;
 8000b38:	bf00      	nop
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <update7SEG>:


void update7SEG(int index){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	f200 8084 	bhi.w	8000c64 <update7SEG+0x118>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <update7SEG+0x18>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000bb1 	.word	0x08000bb1
 8000b6c:	08000bed 	.word	0x08000bed
 8000b70:	08000c29 	.word	0x08000c29
	switch (index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7a:	483d      	ldr	r0, [pc, #244]	; (8000c70 <update7SEG+0x124>)
 8000b7c:	f001 f9e3 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	483a      	ldr	r0, [pc, #232]	; (8000c70 <update7SEG+0x124>)
 8000b88:	f001 f9dd 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4837      	ldr	r0, [pc, #220]	; (8000c70 <update7SEG+0x124>)
 8000b94:	f001 f9d7 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9e:	4834      	ldr	r0, [pc, #208]	; (8000c70 <update7SEG+0x124>)
 8000ba0:	f001 f9d1 	bl	8001f46 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[0]);
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <update7SEG+0x128>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe1f 	bl	80007ec <display7SEG>
		break;
 8000bae:	e05a      	b.n	8000c66 <update7SEG+0x11a>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	482e      	ldr	r0, [pc, #184]	; (8000c70 <update7SEG+0x124>)
 8000bb8:	f001 f9c5 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <update7SEG+0x124>)
 8000bc4:	f001 f9bf 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4828      	ldr	r0, [pc, #160]	; (8000c70 <update7SEG+0x124>)
 8000bd0:	f001 f9b9 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4825      	ldr	r0, [pc, #148]	; (8000c70 <update7SEG+0x124>)
 8000bdc:	f001 f9b3 	bl	8001f46 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[1]);
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <update7SEG+0x128>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe01 	bl	80007ec <display7SEG>
		break;
 8000bea:	e03c      	b.n	8000c66 <update7SEG+0x11a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	481f      	ldr	r0, [pc, #124]	; (8000c70 <update7SEG+0x124>)
 8000bf4:	f001 f9a7 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <update7SEG+0x124>)
 8000c00:	f001 f9a1 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <update7SEG+0x124>)
 8000c0c:	f001 f99b 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	4816      	ldr	r0, [pc, #88]	; (8000c70 <update7SEG+0x124>)
 8000c18:	f001 f995 	bl	8001f46 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[2]);
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <update7SEG+0x128>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fde3 	bl	80007ec <display7SEG>
		break;
 8000c26:	e01e      	b.n	8000c66 <update7SEG+0x11a>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <update7SEG+0x124>)
 8000c30:	f001 f989 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <update7SEG+0x124>)
 8000c3c:	f001 f983 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <update7SEG+0x124>)
 8000c48:	f001 f97d 	bl	8001f46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <update7SEG+0x124>)
 8000c54:	f001 f977 	bl	8001f46 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[3]);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <update7SEG+0x128>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fdc5 	bl	80007ec <display7SEG>
		break;
 8000c62:	e000      	b.n	8000c66 <update7SEG+0x11a>
	default:
		break;
 8000c64:	bf00      	nop
	}
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	20000098 	.word	0x20000098

08000c78 <updateBuffer>:

void updateBuffer(int mode){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b16      	subs	r3, #22
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	f200 809e 	bhi.w	8000dc6 <updateBuffer+0x14e>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <updateBuffer+0x18>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000d07 	.word	0x08000d07
 8000c98:	08000d47 	.word	0x08000d47
 8000c9c:	08000d87 	.word	0x08000d87
	switch(mode){
	case MODE1:
		buffer_7seg[0] = TimeForLed1 / 10;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <updateBuffer+0x15c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <updateBuffer+0x160>)
 8000ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8000caa:	1092      	asrs	r2, r2, #2
 8000cac:	17db      	asrs	r3, r3, #31
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a4a      	ldr	r2, [pc, #296]	; (8000ddc <updateBuffer+0x164>)
 8000cb2:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = TimeForLed1 % 10;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <updateBuffer+0x15c>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <updateBuffer+0x160>)
 8000cba:	fb83 2301 	smull	r2, r3, r3, r1
 8000cbe:	109a      	asrs	r2, r3, #2
 8000cc0:	17cb      	asrs	r3, r1, #31
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1aca      	subs	r2, r1, r3
 8000cce:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <updateBuffer+0x164>)
 8000cd0:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = TimeForLed2 / 10;
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <updateBuffer+0x168>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <updateBuffer+0x160>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1092      	asrs	r2, r2, #2
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <updateBuffer+0x164>)
 8000ce4:	6093      	str	r3, [r2, #8]
		buffer_7seg[3] = TimeForLed2 % 10;
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <updateBuffer+0x168>)
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <updateBuffer+0x160>)
 8000cec:	fb83 2301 	smull	r2, r3, r3, r1
 8000cf0:	109a      	asrs	r2, r3, #2
 8000cf2:	17cb      	asrs	r3, r1, #31
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	1aca      	subs	r2, r1, r3
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <updateBuffer+0x164>)
 8000d02:	60da      	str	r2, [r3, #12]
		break;
 8000d04:	e060      	b.n	8000dc8 <updateBuffer+0x150>
	case MODE2:
		buffer_7seg[0] = value / 10;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <updateBuffer+0x16c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a33      	ldr	r2, [pc, #204]	; (8000dd8 <updateBuffer+0x160>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1092      	asrs	r2, r2, #2
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <updateBuffer+0x164>)
 8000d18:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <updateBuffer+0x16c>)
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <updateBuffer+0x160>)
 8000d20:	fb83 2301 	smull	r2, r3, r3, r1
 8000d24:	109a      	asrs	r2, r3, #2
 8000d26:	17cb      	asrs	r3, r1, #31
 8000d28:	1ad2      	subs	r2, r2, r3
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1aca      	subs	r2, r1, r3
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <updateBuffer+0x164>)
 8000d36:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <updateBuffer+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 2;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <updateBuffer+0x164>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	60da      	str	r2, [r3, #12]
		break;
 8000d44:	e040      	b.n	8000dc8 <updateBuffer+0x150>
	case MODE3:
		buffer_7seg[0] = value / 10;
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <updateBuffer+0x16c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <updateBuffer+0x160>)
 8000d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d50:	1092      	asrs	r2, r2, #2
 8000d52:	17db      	asrs	r3, r3, #31
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <updateBuffer+0x164>)
 8000d58:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <updateBuffer+0x16c>)
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <updateBuffer+0x160>)
 8000d60:	fb83 2301 	smull	r2, r3, r3, r1
 8000d64:	109a      	asrs	r2, r3, #2
 8000d66:	17cb      	asrs	r3, r1, #31
 8000d68:	1ad2      	subs	r2, r2, r3
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	1aca      	subs	r2, r1, r3
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <updateBuffer+0x164>)
 8000d76:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <updateBuffer+0x164>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 3;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <updateBuffer+0x164>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	60da      	str	r2, [r3, #12]
		break;
 8000d84:	e020      	b.n	8000dc8 <updateBuffer+0x150>
	case MODE4:
		buffer_7seg[0] = value / 10;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <updateBuffer+0x16c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <updateBuffer+0x160>)
 8000d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d90:	1092      	asrs	r2, r2, #2
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <updateBuffer+0x164>)
 8000d98:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <updateBuffer+0x16c>)
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <updateBuffer+0x160>)
 8000da0:	fb83 2301 	smull	r2, r3, r3, r1
 8000da4:	109a      	asrs	r2, r3, #2
 8000da6:	17cb      	asrs	r3, r1, #31
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	1aca      	subs	r2, r1, r3
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <updateBuffer+0x164>)
 8000db6:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <updateBuffer+0x164>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 4;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <updateBuffer+0x164>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	60da      	str	r2, [r3, #12]
		break;
 8000dc4:	e000      	b.n	8000dc8 <updateBuffer+0x150>
	default:
		break;
 8000dc6:	bf00      	nop
	}
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000005c 	.word	0x2000005c
 8000dd8:	66666667 	.word	0x66666667
 8000ddc:	20000098 	.word	0x20000098
 8000de0:	20000060 	.word	0x20000060
 8000de4:	200000a8 	.word	0x200000a8

08000de8 <display_led7seg>:
// hiá»n thá» led 7 Äoáº¡n vá»i T = 0.25s
void display_led7seg(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	switch(STATUS_7SEG){
 8000dec:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <display_led7seg+0x13c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	2b20      	cmp	r3, #32
 8000df4:	f200 808a 	bhi.w	8000f0c <display_led7seg+0x124>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <display_led7seg+0x18>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e85 	.word	0x08000e85
 8000e04:	08000f0d 	.word	0x08000f0d
 8000e08:	08000f0d 	.word	0x08000f0d
 8000e0c:	08000f0d 	.word	0x08000f0d
 8000e10:	08000f0d 	.word	0x08000f0d
 8000e14:	08000f0d 	.word	0x08000f0d
 8000e18:	08000f0d 	.word	0x08000f0d
 8000e1c:	08000f0d 	.word	0x08000f0d
 8000e20:	08000f0d 	.word	0x08000f0d
 8000e24:	08000f0d 	.word	0x08000f0d
 8000e28:	08000f0d 	.word	0x08000f0d
 8000e2c:	08000f0d 	.word	0x08000f0d
 8000e30:	08000f0d 	.word	0x08000f0d
 8000e34:	08000f0d 	.word	0x08000f0d
 8000e38:	08000f0d 	.word	0x08000f0d
 8000e3c:	08000f0d 	.word	0x08000f0d
 8000e40:	08000f0d 	.word	0x08000f0d
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	08000f0d 	.word	0x08000f0d
 8000e4c:	08000f0d 	.word	0x08000f0d
 8000e50:	08000f0d 	.word	0x08000f0d
 8000e54:	08000f0d 	.word	0x08000f0d
 8000e58:	08000f0d 	.word	0x08000f0d
 8000e5c:	08000f0d 	.word	0x08000f0d
 8000e60:	08000f0d 	.word	0x08000f0d
 8000e64:	08000f0d 	.word	0x08000f0d
 8000e68:	08000f0d 	.word	0x08000f0d
 8000e6c:	08000f0d 	.word	0x08000f0d
 8000e70:	08000f0d 	.word	0x08000f0d
 8000e74:	08000e95 	.word	0x08000e95
 8000e78:	08000eb3 	.word	0x08000eb3
 8000e7c:	08000ed1 	.word	0x08000ed1
 8000e80:	08000eef 	.word	0x08000eef
	case INIT:
		STATUS_7SEG = LED7SEG1;
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <display_led7seg+0x13c>)
 8000e86:	221e      	movs	r2, #30
 8000e88:	601a      	str	r2, [r3, #0]
		setTimer(5, 250);
 8000e8a:	21fa      	movs	r1, #250	; 0xfa
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f000 faf9 	bl	8001484 <setTimer>
		break;
 8000e92:	e044      	b.n	8000f1e <display_led7seg+0x136>
	case LED7SEG1:
		update7SEG(0);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fe59 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <display_led7seg+0x140>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d136      	bne.n	8000f10 <display_led7seg+0x128>
			setTimer(5, 250);
 8000ea2:	21fa      	movs	r1, #250	; 0xfa
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f000 faed 	bl	8001484 <setTimer>
			STATUS_7SEG = LED7SEG2;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <display_led7seg+0x13c>)
 8000eac:	221f      	movs	r2, #31
 8000eae:	601a      	str	r2, [r3, #0]
		}
		break;
 8000eb0:	e02e      	b.n	8000f10 <display_led7seg+0x128>
	case LED7SEG2:
		update7SEG(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff fe4a 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <display_led7seg+0x140>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d129      	bne.n	8000f14 <display_led7seg+0x12c>
			setTimer(5, 250);
 8000ec0:	21fa      	movs	r1, #250	; 0xfa
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f000 fade 	bl	8001484 <setTimer>
			STATUS_7SEG = LED7SEG3;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <display_led7seg+0x13c>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ece:	e021      	b.n	8000f14 <display_led7seg+0x12c>
	case LED7SEG3:
		update7SEG(2);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fe3b 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <display_led7seg+0x140>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d11c      	bne.n	8000f18 <display_led7seg+0x130>
			setTimer(5, 250);
 8000ede:	21fa      	movs	r1, #250	; 0xfa
 8000ee0:	2005      	movs	r0, #5
 8000ee2:	f000 facf 	bl	8001484 <setTimer>
			STATUS_7SEG = LED7SEG4;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <display_led7seg+0x13c>)
 8000ee8:	2221      	movs	r2, #33	; 0x21
 8000eea:	601a      	str	r2, [r3, #0]
		}
		break;
 8000eec:	e014      	b.n	8000f18 <display_led7seg+0x130>
	case LED7SEG4:
		update7SEG(3);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f7ff fe2c 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <display_led7seg+0x140>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10f      	bne.n	8000f1c <display_led7seg+0x134>
			setTimer(5, 250);
 8000efc:	21fa      	movs	r1, #250	; 0xfa
 8000efe:	2005      	movs	r0, #5
 8000f00:	f000 fac0 	bl	8001484 <setTimer>
			STATUS_7SEG = LED7SEG1;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <display_led7seg+0x13c>)
 8000f06:	221e      	movs	r2, #30
 8000f08:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f0a:	e007      	b.n	8000f1c <display_led7seg+0x134>
	default:
		break;
 8000f0c:	bf00      	nop
 8000f0e:	e006      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f10:	bf00      	nop
 8000f12:	e004      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f14:	bf00      	nop
 8000f16:	e002      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f1c:	bf00      	nop
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000044 	.word	0x20000044
 8000f28:	200000c4 	.word	0x200000c4

08000f2c <leddebug>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void leddebug(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f30:	2102      	movs	r1, #2
 8000f32:	4802      	ldr	r0, [pc, #8]	; (8000f3c <leddebug+0x10>)
 8000f34:	f001 f81f 	bl	8001f76 <HAL_GPIO_TogglePin>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010800 	.word	0x40010800

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fcfe 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f83c 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f8c2 	bl	80010d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f50:	f000 f874 	bl	800103c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f54:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <main+0x68>)
 8000f56:	f001 fc53 	bl	8002800 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000f5a:	f000 f92c 	bl	80011b6 <SCH_Init>
  System_Initilization();
 8000f5e:	f000 fcbf 	bl	80018e0 <System_Initilization>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(leddebug, 0, 500);
 8000f62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f66:	2100      	movs	r1, #0
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <main+0x6c>)
 8000f6a:	f000 f9a7 	bl	80012bc <SCH_Add_Task>
  SCH_Add_Task(timerRun, 1, 10);
 8000f6e:	220a      	movs	r2, #10
 8000f70:	2101      	movs	r1, #1
 8000f72:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <main+0x70>)
 8000f74:	f000 f9a2 	bl	80012bc <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 2, 10);
 8000f78:	220a      	movs	r2, #10
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <main+0x74>)
 8000f7e:	f000 f99d 	bl	80012bc <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 3, 10);
 8000f82:	220a      	movs	r2, #10
 8000f84:	2103      	movs	r1, #3
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <main+0x78>)
 8000f88:	f000 f998 	bl	80012bc <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 4, 10);
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	2104      	movs	r1, #4
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <main+0x7c>)
 8000f92:	f000 f993 	bl	80012bc <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 5, 10);
 8000f96:	220a      	movs	r2, #10
 8000f98:	2105      	movs	r1, #5
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <main+0x80>)
 8000f9c:	f000 f98e 	bl	80012bc <SCH_Add_Task>
//		  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
//	  }
//	  if(isButtonPressed(2) == 1) {
//		  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
//	  }
	  SCH_Dispatch_Tasks();
 8000fa0:	f000 f9e4 	bl	800136c <SCH_Dispatch_Tasks>
 8000fa4:	e7fc      	b.n	8000fa0 <main+0x60>
 8000fa6:	bf00      	nop
 8000fa8:	200000dc 	.word	0x200000dc
 8000fac:	08000f2d 	.word	0x08000f2d
 8000fb0:	080014c5 	.word	0x080014c5
 8000fb4:	080001d9 	.word	0x080001d9
 8000fb8:	08000659 	.word	0x08000659
 8000fbc:	080002e1 	.word	0x080002e1
 8000fc0:	0800057d 	.word	0x0800057d

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b090      	sub	sp, #64	; 0x40
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	2228      	movs	r2, #40	; 0x28
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 ffc4 	bl	8002f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fea:	2301      	movs	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 ffd4 	bl	8001fa8 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001006:	f000 f8d1 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fa40 	bl	80024a8 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800102e:	f000 f8bd 	bl	80011ac <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3740      	adds	r7, #64	; 0x40
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_TIM2_Init+0x94>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001062:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM2_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001070:	2209      	movs	r2, #9
 8001072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_TIM2_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001082:	f001 fb6d 	bl	8002760 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800108c:	f000 f88e 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_TIM2_Init+0x94>)
 800109e:	f001 fceb 	bl	8002a78 <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010a8:	f000 f880 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_TIM2_Init+0x94>)
 80010ba:	f001 fec3 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f872 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000dc 	.word	0x200000dc

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_GPIO_Init+0xb8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <MX_GPIO_Init+0xb8>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_GPIO_Init+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_GPIO_Init+0xb8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <MX_GPIO_Init+0xb8>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_GPIO_Init+0xb8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 8001118:	2200      	movs	r2, #0
 800111a:	f64f 718e 	movw	r1, #65422	; 0xff8e
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <MX_GPIO_Init+0xbc>)
 8001120:	f000 ff11 	bl	8001f46 <HAL_GPIO_WritePin>
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 8001124:	2200      	movs	r2, #0
 8001126:	f24f 010f 	movw	r1, #61455	; 0xf00f
 800112a:	481a      	ldr	r0, [pc, #104]	; (8001194 <MX_GPIO_Init+0xc0>)
 800112c:	f000 ff0b 	bl	8001f46 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 8001130:	f64f 738e 	movw	r3, #65422	; 0xff8e
 8001134:	60bb      	str	r3, [r7, #8]
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4619      	mov	r1, r3
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_GPIO_Init+0xbc>)
 800114a:	f000 fd6b 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800114e:	2370      	movs	r3, #112	; 0x70
 8001150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0xbc>)
 8001162:	f000 fd5f 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_3_Pin SEG_4_Pin SEG_5_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 8001166:	f24f 030f 	movw	r3, #61455	; 0xf00f
 800116a:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_GPIO_Init+0xc0>)
 8001180:	f000 fd50 	bl	8001c24 <HAL_GPIO_Init>

}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00

08001198 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	//timerRun();
	//getKeyInput();
	SCH_Update();
 80011a0:	f000 f81e 	bl	80011e0 <SCH_Update>

}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>

080011b6 <SCH_Init>:
 */
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
	//current_index_task = 0;						// 0->current_index_task
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	e006      	b.n	80011d0 <SCH_Init+0x1a>
		SCH_Delete_Task (i);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f91b 	bl	8001400 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	3301      	adds	r3, #1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b27      	cmp	r3, #39	; 0x27
 80011d4:	d9f5      	bls.n	80011c2 <SCH_Init+0xc>
	}
	//Error_code_G= 0;
	//Timer_init();
	//Watchdog_init();
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SCH_Update>:
void SCH_Update(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	e05b      	b.n	80012a4 <SCH_Update+0xc4>
		if (SCH_tasks_G[i].pTask) {
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	4932      	ldr	r1, [pc, #200]	; (80012b8 <SCH_Update+0xd8>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d04e      	beq.n	800129e <SCH_Update+0xbe>
			if (SCH_tasks_G[i].Delay <= 0) {
 8001200:	79fa      	ldrb	r2, [r7, #7]
 8001202:	492d      	ldr	r1, [pc, #180]	; (80012b8 <SCH_Update+0xd8>)
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d131      	bne.n	800127a <SCH_Update+0x9a>
				SCH_tasks_G[i].RunMe ++;
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	4927      	ldr	r1, [pc, #156]	; (80012b8 <SCH_Update+0xd8>)
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	330c      	adds	r3, #12
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b2d8      	uxtb	r0, r3
 800122c:	4922      	ldr	r1, [pc, #136]	; (80012b8 <SCH_Update+0xd8>)
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	4602      	mov	r2, r0
 800123c:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[i].Period) {	 	// Co lap
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	491d      	ldr	r1, [pc, #116]	; (80012b8 <SCH_Update+0xd8>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	3308      	adds	r3, #8
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d024      	beq.n	800129e <SCH_Update+0xbe>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001254:	79f9      	ldrb	r1, [r7, #7]
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <SCH_Update+0xd8>)
 800125a:	460b      	mov	r3, r1
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4403      	add	r3, r0
 8001264:	3308      	adds	r3, #8
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <SCH_Update+0xd8>)
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4403      	add	r3, r0
 8001274:	3304      	adds	r3, #4
 8001276:	6019      	str	r1, [r3, #0]
 8001278:	e011      	b.n	800129e <SCH_Update+0xbe>
				}
			}else {
				SCH_tasks_G[i].Delay --;
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <SCH_Update+0xd8>)
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3304      	adds	r3, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1e59      	subs	r1, r3, #1
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <SCH_Update+0xd8>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4403      	add	r3, r0
 800129a:	3304      	adds	r3, #4
 800129c:	6019      	str	r1, [r3, #0]
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3301      	adds	r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b27      	cmp	r3, #39	; 0x27
 80012a8:	d9a0      	bls.n	80011ec <SCH_Update+0xc>
			}
		}
	}
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000124 	.word	0x20000124

080012bc <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(),  unsigned int DELAY,  unsigned int PERIOD) {
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[i].pTask != 0) && (i < SCH_MAX_TASKS)) {
 80012cc:	e002      	b.n	80012d4 <SCH_Add_Task+0x18>
		i++;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	3301      	adds	r3, #1
 80012d2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[i].pTask != 0) && (i < SCH_MAX_TASKS)) {
 80012d4:	7dfa      	ldrb	r2, [r7, #23]
 80012d6:	4923      	ldr	r1, [pc, #140]	; (8001364 <SCH_Add_Task+0xa8>)
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <SCH_Add_Task+0x32>
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b27      	cmp	r3, #39	; 0x27
 80012ec:	d9ef      	bls.n	80012ce <SCH_Add_Task+0x12>
	}
	// Khong tim thay vi tri trong
	if (i == SCH_MAX_TASKS) {
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b28      	cmp	r3, #40	; 0x28
 80012f2:	d101      	bne.n	80012f8 <SCH_Add_Task+0x3c>
		//Error_code_G=ERROR_SCH_TOO_MANY_TASKS;
		return SCH_MAX_TASKS;
 80012f4:	2328      	movs	r3, #40	; 0x28
 80012f6:	e02f      	b.n	8001358 <SCH_Add_Task+0x9c>
	}
	SCH_tasks_G[i].pTask = pFunction;
 80012f8:	7dfa      	ldrb	r2, [r7, #23]
 80012fa:	491a      	ldr	r1, [pc, #104]	; (8001364 <SCH_Add_Task+0xa8>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[i].Delay = DELAY / TICK ;
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4916      	ldr	r1, [pc, #88]	; (8001368 <SCH_Add_Task+0xac>)
 8001310:	fba1 1303 	umull	r1, r3, r1, r3
 8001314:	08d9      	lsrs	r1, r3, #3
 8001316:	4813      	ldr	r0, [pc, #76]	; (8001364 <SCH_Add_Task+0xa8>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4403      	add	r3, r0
 8001322:	3304      	adds	r3, #4
 8001324:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[i].Period = PERIOD / TICK ;
 8001326:	7dfa      	ldrb	r2, [r7, #23]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	490f      	ldr	r1, [pc, #60]	; (8001368 <SCH_Add_Task+0xac>)
 800132c:	fba1 1303 	umull	r1, r3, r1, r3
 8001330:	08d9      	lsrs	r1, r3, #3
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <SCH_Add_Task+0xa8>)
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4403      	add	r3, r0
 800133e:	3308      	adds	r3, #8
 8001340:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[i].RunMe = 0;
 8001342:	7dfa      	ldrb	r2, [r7, #23]
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <SCH_Add_Task+0xa8>)
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	330c      	adds	r3, #12
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]

	//SCH_tasks_G[i].TaskID = i; // Luu giu vi tri he thong
	return i;
 8001356:	7dfb      	ldrb	r3, [r7, #23]
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000124 	.word	0x20000124
 8001368:	cccccccd 	.word	0xcccccccd

0800136c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e039      	b.n	80013ec <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0) { 			// nhu kiem tra flag
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4920      	ldr	r1, [pc, #128]	; (80013fc <SCH_Dispatch_Tasks+0x90>)
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	330c      	adds	r3, #12
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d02b      	beq.n	80013e6 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[i].pTask)(); 				// tro den nhiem vu cu the
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	491a      	ldr	r1, [pc, #104]	; (80013fc <SCH_Dispatch_Tasks+0x90>)
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4798      	blx	r3
			SCH_tasks_G[i].RunMe--;
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	4916      	ldr	r1, [pc, #88]	; (80013fc <SCH_Dispatch_Tasks+0x90>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	330c      	adds	r3, #12
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b2d8      	uxtb	r0, r3
 80013b6:	4911      	ldr	r1, [pc, #68]	; (80013fc <SCH_Dispatch_Tasks+0x90>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	330c      	adds	r3, #12
 80013c4:	4602      	mov	r2, r0
 80013c6:	701a      	strb	r2, [r3, #0]

			// ONE-SHOT
			if(SCH_tasks_G[i].Period == 0){
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <SCH_Dispatch_Tasks+0x90>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3308      	adds	r3, #8
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f80d 	bl	8001400 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3301      	adds	r3, #1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b27      	cmp	r3, #39	; 0x27
 80013f0:	d9c2      	bls.n	8001378 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
	 //SCH_Report_Status();// Report system status
	 //SCH_Go_To_Sleep();// The scheduler enters idlemode at this point
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000124 	.word	0x20000124

08001400 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(uint32_t ID) {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[ID].pTask == 0 || ID >= SCH_MAX_TASKS){
 8001408:	491d      	ldr	r1, [pc, #116]	; (8001480 <SCH_Delete_Task+0x80>)
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <SCH_Delete_Task+0x22>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b27      	cmp	r3, #39	; 0x27
 8001420:	d901      	bls.n	8001426 <SCH_Delete_Task+0x26>
		 //Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK
		return RETURN_ERROR;
 8001422:	2300      	movs	r3, #0
 8001424:	e027      	b.n	8001476 <SCH_Delete_Task+0x76>
	}
	SCH_tasks_G[ID].pTask = 0x0000;
 8001426:	4916      	ldr	r1, [pc, #88]	; (8001480 <SCH_Delete_Task+0x80>)
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].Delay = 0;
 8001438:	4911      	ldr	r1, [pc, #68]	; (8001480 <SCH_Delete_Task+0x80>)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	3304      	adds	r3, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].Period = 0;
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <SCH_Delete_Task+0x80>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].RunMe = 0;
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <SCH_Delete_Task+0x80>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	330c      	adds	r3, #12
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
	return RETURN_NORMAL; // return status
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000124 	.word	0x20000124

08001484 <setTimer>:
 */

#include "software_timer.h"
#define TICK 	10

void setTimer(int index, int duration){
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <setTimer+0x34>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2100      	movs	r1, #0
 8001494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration / TICK;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <setTimer+0x38>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	1092      	asrs	r2, r2, #2
 80014a2:	17db      	asrs	r3, r3, #31
 80014a4:	1ad2      	subs	r2, r2, r3
 80014a6:	4906      	ldr	r1, [pc, #24]	; (80014c0 <setTimer+0x3c>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	200000c4 	.word	0x200000c4
 80014bc:	66666667 	.word	0x66666667
 80014c0:	200000ac 	.word	0x200000ac

080014c4 <timerRun>:

void timerRun(){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_BUFFER; i++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	e01c      	b.n	800150a <timerRun+0x46>
		if(timer_counter[i] > 0){
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <timerRun+0x58>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd13      	ble.n	8001504 <timerRun+0x40>
			timer_counter[i] --;
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <timerRun+0x58>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <timerRun+0x58>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <timerRun+0x58>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dc04      	bgt.n	8001504 <timerRun+0x40>
				timer_flag[i] = 1;
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <timerRun+0x5c>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2101      	movs	r1, #1
 8001500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_BUFFER; i++){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3301      	adds	r3, #1
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b05      	cmp	r3, #5
 800150e:	dddf      	ble.n	80014d0 <timerRun+0xc>
			}
		}
	}
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	200000ac 	.word	0x200000ac
 8001520:	200000c4 	.word	0x200000c4

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_MspInit+0x5c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_MspInit+0x5c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_MspInit+0x60>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_MspInit+0x60>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001598:	d113      	bne.n	80015c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_TIM_Base_MspInit+0x44>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_TIM_Base_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_TIM_Base_MspInit+0x44>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	201c      	movs	r0, #28
 80015b8:	f000 fafd 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015bc:	201c      	movs	r0, #28
 80015be:	f000 fb16 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f9db 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <TIM2_IRQHandler+0x10>)
 8001626:	f001 f937 	bl	8002898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000dc 	.word	0x200000dc

08001634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <OffAll1>:
 *      Author: Admin
 */

#include "traffic_light.h"

void OffAll1(){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <OffAll1+0x2c>)
 800164a:	f000 fc7c 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <OffAll1+0x2c>)
 8001656:	f000 fc76 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <OffAll1+0x2c>)
 8001662:	f000 fc70 	bl	8001f46 <HAL_GPIO_WritePin>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40010800 	.word	0x40010800

08001670 <OffAll2>:
void OffAll2(){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <OffAll2+0x2c>)
 800167c:	f000 fc63 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <OffAll2+0x2c>)
 8001688:	f000 fc5d 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <OffAll2+0x2c>)
 8001694:	f000 fc57 	bl	8001f46 <HAL_GPIO_WritePin>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010800 	.word	0x40010800

080016a0 <OnLedRed1>:
void OnLedRed1(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <OnLedRed1+0x2c>)
 80016aa:	f000 fc4c 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <OnLedRed1+0x2c>)
 80016b6:	f000 fc46 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <OnLedRed1+0x2c>)
 80016c2:	f000 fc40 	bl	8001f46 <HAL_GPIO_WritePin>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40010800 	.word	0x40010800

080016d0 <OnLedRed2>:
void OnLedRed2(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016da:	4808      	ldr	r0, [pc, #32]	; (80016fc <OnLedRed2+0x2c>)
 80016dc:	f000 fc33 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <OnLedRed2+0x2c>)
 80016e8:	f000 fc2d 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f2:	4802      	ldr	r0, [pc, #8]	; (80016fc <OnLedRed2+0x2c>)
 80016f4:	f000 fc27 	bl	8001f46 <HAL_GPIO_WritePin>
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010800 	.word	0x40010800

08001700 <OnLedYellow1>:
void OnLedYellow1(){
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <OnLedYellow1+0x2c>)
 800170a:	f000 fc1c 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <OnLedYellow1+0x2c>)
 8001716:	f000 fc16 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <OnLedYellow1+0x2c>)
 8001722:	f000 fc10 	bl	8001f46 <HAL_GPIO_WritePin>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40010800 	.word	0x40010800

08001730 <OnLedYellow2>:
void OnLedYellow2(){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <OnLedYellow2+0x2c>)
 800173c:	f000 fc03 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <OnLedYellow2+0x2c>)
 8001748:	f000 fbfd 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001752:	4802      	ldr	r0, [pc, #8]	; (800175c <OnLedYellow2+0x2c>)
 8001754:	f000 fbf7 	bl	8001f46 <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40010800 	.word	0x40010800

08001760 <OnLedGreen1>:
void OnLedGreen1(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <OnLedGreen1+0x2c>)
 800176a:	f000 fbec 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <OnLedGreen1+0x2c>)
 8001776:	f000 fbe6 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <OnLedGreen1+0x2c>)
 8001782:	f000 fbe0 	bl	8001f46 <HAL_GPIO_WritePin>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40010800 	.word	0x40010800

08001790 <OnLedGreen2>:
void OnLedGreen2(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <OnLedGreen2+0x2c>)
 800179c:	f000 fbd3 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <OnLedGreen2+0x2c>)
 80017a8:	f000 fbcd 	bl	8001f46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	4802      	ldr	r0, [pc, #8]	; (80017bc <OnLedGreen2+0x2c>)
 80017b4:	f000 fbc7 	bl	8001f46 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40010800 	.word	0x40010800

080017c0 <BlinkyLedRed>:


void BlinkyLedRed(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <BlinkyLedRed+0x1c>)
 80017c8:	f000 fbd5 	bl	8001f76 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80017cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <BlinkyLedRed+0x1c>)
 80017d2:	f000 fbd0 	bl	8001f76 <HAL_GPIO_TogglePin>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40010800 	.word	0x40010800

080017e0 <BlinkyLedYellow>:
void BlinkyLedYellow(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80017e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <BlinkyLedYellow+0x1c>)
 80017ea:	f000 fbc4 	bl	8001f76 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80017ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f2:	4802      	ldr	r0, [pc, #8]	; (80017fc <BlinkyLedYellow+0x1c>)
 80017f4:	f000 fbbf 	bl	8001f76 <HAL_GPIO_TogglePin>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40010800 	.word	0x40010800

08001800 <BlinkyLedGreen>:
void BlinkyLedGreen(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <BlinkyLedGreen+0x1c>)
 800180a:	f000 fbb4 	bl	8001f76 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 800180e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001812:	4802      	ldr	r0, [pc, #8]	; (800181c <BlinkyLedGreen+0x1c>)
 8001814:	f000 fbaf 	bl	8001f76 <HAL_GPIO_TogglePin>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010800 	.word	0x40010800

08001820 <BlinkyLed>:
void BlinkyLed(int led){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	switch(STATUS_BLINKY){
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <BlinkyLed+0xb8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b2a      	cmp	r3, #42	; 0x2a
 800182e:	d03b      	beq.n	80018a8 <BlinkyLed+0x88>
 8001830:	2b2a      	cmp	r3, #42	; 0x2a
 8001832:	dc44      	bgt.n	80018be <BlinkyLed+0x9e>
 8001834:	2b29      	cmp	r3, #41	; 0x29
 8001836:	d02c      	beq.n	8001892 <BlinkyLed+0x72>
 8001838:	2b29      	cmp	r3, #41	; 0x29
 800183a:	dc40      	bgt.n	80018be <BlinkyLed+0x9e>
 800183c:	2b01      	cmp	r3, #1
 800183e:	d002      	beq.n	8001846 <BlinkyLed+0x26>
 8001840:	2b28      	cmp	r3, #40	; 0x28
 8001842:	d01b      	beq.n	800187c <BlinkyLed+0x5c>
			setTimer(4, 250);
			BlinkyLedGreen();
		}
		break;
	default:
		break;
 8001844:	e03b      	b.n	80018be <BlinkyLed+0x9e>
		OffAll1();
 8001846:	f7ff fefb 	bl	8001640 <OffAll1>
		OffAll2();
 800184a:	f7ff ff11 	bl	8001670 <OffAll2>
		setTimer(4, 250);
 800184e:	21fa      	movs	r1, #250	; 0xfa
 8001850:	2004      	movs	r0, #4
 8001852:	f7ff fe17 	bl	8001484 <setTimer>
		if(led == RED) STATUS_BLINKY = RED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b28      	cmp	r3, #40	; 0x28
 800185a:	d102      	bne.n	8001862 <BlinkyLed+0x42>
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <BlinkyLed+0xb8>)
 800185e:	2228      	movs	r2, #40	; 0x28
 8001860:	601a      	str	r2, [r3, #0]
		if(led == YELLOW) STATUS_BLINKY = YELLOW;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b29      	cmp	r3, #41	; 0x29
 8001866:	d102      	bne.n	800186e <BlinkyLed+0x4e>
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <BlinkyLed+0xb8>)
 800186a:	2229      	movs	r2, #41	; 0x29
 800186c:	601a      	str	r2, [r3, #0]
		if(led == GREEN) STATUS_BLINKY = GREEN;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b2a      	cmp	r3, #42	; 0x2a
 8001872:	d126      	bne.n	80018c2 <BlinkyLed+0xa2>
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <BlinkyLed+0xb8>)
 8001876:	222a      	movs	r2, #42	; 0x2a
 8001878:	601a      	str	r2, [r3, #0]
		break;
 800187a:	e022      	b.n	80018c2 <BlinkyLed+0xa2>
		if(timer_flag[4] == 1){
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <BlinkyLed+0xbc>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d120      	bne.n	80018c6 <BlinkyLed+0xa6>
			setTimer(4, 250);
 8001884:	21fa      	movs	r1, #250	; 0xfa
 8001886:	2004      	movs	r0, #4
 8001888:	f7ff fdfc 	bl	8001484 <setTimer>
			BlinkyLedRed();
 800188c:	f7ff ff98 	bl	80017c0 <BlinkyLedRed>
		break;
 8001890:	e019      	b.n	80018c6 <BlinkyLed+0xa6>
		if(timer_flag[4] == 1){
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <BlinkyLed+0xbc>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d117      	bne.n	80018ca <BlinkyLed+0xaa>
			setTimer(4, 250);
 800189a:	21fa      	movs	r1, #250	; 0xfa
 800189c:	2004      	movs	r0, #4
 800189e:	f7ff fdf1 	bl	8001484 <setTimer>
			BlinkyLedYellow();
 80018a2:	f7ff ff9d 	bl	80017e0 <BlinkyLedYellow>
		break;
 80018a6:	e010      	b.n	80018ca <BlinkyLed+0xaa>
		if(timer_flag[4] == 1){
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <BlinkyLed+0xbc>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10e      	bne.n	80018ce <BlinkyLed+0xae>
			setTimer(4, 250);
 80018b0:	21fa      	movs	r1, #250	; 0xfa
 80018b2:	2004      	movs	r0, #4
 80018b4:	f7ff fde6 	bl	8001484 <setTimer>
			BlinkyLedGreen();
 80018b8:	f7ff ffa2 	bl	8001800 <BlinkyLedGreen>
		break;
 80018bc:	e007      	b.n	80018ce <BlinkyLed+0xae>
		break;
 80018be:	bf00      	nop
 80018c0:	e006      	b.n	80018d0 <BlinkyLed+0xb0>
		break;
 80018c2:	bf00      	nop
 80018c4:	e004      	b.n	80018d0 <BlinkyLed+0xb0>
		break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <BlinkyLed+0xb0>
		break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <BlinkyLed+0xb0>
		break;
 80018ce:	bf00      	nop
	}
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000004c 	.word	0x2000004c
 80018dc:	200000c4 	.word	0x200000c4

080018e0 <System_Initilization>:

void System_Initilization(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2102      	movs	r1, #2
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <System_Initilization+0x14>)
 80018ea:	f000 fb2c 	bl	8001f46 <HAL_GPIO_WritePin>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40010800 	.word	0x40010800

080018f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f8:	f7ff fe9c 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018fe:	490c      	ldr	r1, [pc, #48]	; (8001930 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001914:	4c09      	ldr	r4, [pc, #36]	; (800193c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001922:	f001 faf9 	bl	8002f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fb0b 	bl	8000f40 <main>
  bx lr
 800192a:	4770      	bx	lr
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001934:	08002fb4 	.word	0x08002fb4
  ldr r2, =_sbss
 8001938:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800193c:	20000448 	.word	0x20000448

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x28>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x28>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 f923 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	200f      	movs	r0, #15
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fde0 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f93b 	bl	8001c0a <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f903 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000064 	.word	0x20000064
 80019c8:	2000006c 	.word	0x2000006c
 80019cc:	20000068 	.word	0x20000068

080019d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x1c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_IncTick+0x20>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_IncTick+0x20>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	2000006c 	.word	0x2000006c
 80019f0:	20000444 	.word	0x20000444

080019f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_GetTick+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000444 	.word	0x20000444

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <__NVIC_EnableIRQ+0x34>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff90 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff2d 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff42 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff35 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b08b      	sub	sp, #44	; 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e148      	b.n	8001eca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8137 	bne.w	8001ec4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4aa3      	ldr	r2, [pc, #652]	; (8001ee8 <HAL_GPIO_Init+0x2c4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d05e      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c60:	4aa1      	ldr	r2, [pc, #644]	; (8001ee8 <HAL_GPIO_Init+0x2c4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d875      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c66:	4aa1      	ldr	r2, [pc, #644]	; (8001eec <HAL_GPIO_Init+0x2c8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d058      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c6c:	4a9f      	ldr	r2, [pc, #636]	; (8001eec <HAL_GPIO_Init+0x2c8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d86f      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c72:	4a9f      	ldr	r2, [pc, #636]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d052      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c78:	4a9d      	ldr	r2, [pc, #628]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d869      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a9d      	ldr	r2, [pc, #628]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04c      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c84:	4a9b      	ldr	r2, [pc, #620]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d863      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c8a:	4a9b      	ldr	r2, [pc, #620]	; (8001ef8 <HAL_GPIO_Init+0x2d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d046      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c90:	4a99      	ldr	r2, [pc, #612]	; (8001ef8 <HAL_GPIO_Init+0x2d4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d85d      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d82a      	bhi.n	8001cf0 <HAL_GPIO_Init+0xcc>
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d859      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <HAL_GPIO_Init+0x80>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001d1f 	.word	0x08001d1f
 8001ca8:	08001cf9 	.word	0x08001cf9
 8001cac:	08001d0b 	.word	0x08001d0b
 8001cb0:	08001d4d 	.word	0x08001d4d
 8001cb4:	08001d53 	.word	0x08001d53
 8001cb8:	08001d53 	.word	0x08001d53
 8001cbc:	08001d53 	.word	0x08001d53
 8001cc0:	08001d53 	.word	0x08001d53
 8001cc4:	08001d53 	.word	0x08001d53
 8001cc8:	08001d53 	.word	0x08001d53
 8001ccc:	08001d53 	.word	0x08001d53
 8001cd0:	08001d53 	.word	0x08001d53
 8001cd4:	08001d53 	.word	0x08001d53
 8001cd8:	08001d53 	.word	0x08001d53
 8001cdc:	08001d53 	.word	0x08001d53
 8001ce0:	08001d53 	.word	0x08001d53
 8001ce4:	08001d53 	.word	0x08001d53
 8001ce8:	08001d01 	.word	0x08001d01
 8001cec:	08001d15 	.word	0x08001d15
 8001cf0:	4a82      	ldr	r2, [pc, #520]	; (8001efc <HAL_GPIO_Init+0x2d8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cf6:	e02c      	b.n	8001d52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e029      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e024      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	3308      	adds	r3, #8
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e01f      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	330c      	adds	r3, #12
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e01a      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d26:	2304      	movs	r3, #4
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e013      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	611a      	str	r2, [r3, #16]
          break;
 8001d3e:	e009      	b.n	8001d54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d40:	2308      	movs	r3, #8
 8001d42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	615a      	str	r2, [r3, #20]
          break;
 8001d4a:	e003      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          break;
 8001d52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2bff      	cmp	r3, #255	; 0xff
 8001d58:	d801      	bhi.n	8001d5e <HAL_GPIO_Init+0x13a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_Init+0x13e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2bff      	cmp	r3, #255	; 0xff
 8001d68:	d802      	bhi.n	8001d70 <HAL_GPIO_Init+0x14c>
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x152>
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3b08      	subs	r3, #8
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	6a39      	ldr	r1, [r7, #32]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	431a      	orrs	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8090 	beq.w	8001ec4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x2dc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a55      	ldr	r2, [pc, #340]	; (8001f00 <HAL_GPIO_Init+0x2dc>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_GPIO_Init+0x2dc>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dbc:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a49      	ldr	r2, [pc, #292]	; (8001f08 <HAL_GPIO_Init+0x2e4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00d      	beq.n	8001e04 <HAL_GPIO_Init+0x1e0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x1dc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_GPIO_Init+0x1d8>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001e04:	2300      	movs	r3, #0
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e16:	493b      	ldr	r1, [pc, #236]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4937      	ldr	r1, [pc, #220]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4933      	ldr	r1, [pc, #204]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	492d      	ldr	r1, [pc, #180]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4929      	ldr	r1, [pc, #164]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4923      	ldr	r1, [pc, #140]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	491f      	ldr	r1, [pc, #124]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4919      	ldr	r1, [pc, #100]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4915      	ldr	r1, [pc, #84]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f aeaf 	bne.w	8001c38 <HAL_GPIO_Init+0x14>
  }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	372c      	adds	r7, #44	; 0x2c
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	10320000 	.word	0x10320000
 8001eec:	10310000 	.word	0x10310000
 8001ef0:	10220000 	.word	0x10220000
 8001ef4:	10210000 	.word	0x10210000
 8001ef8:	10120000 	.word	0x10120000
 8001efc:	10110000 	.word	0x10110000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e001      	b.n	8001f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	807b      	strh	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f56:	787b      	ldrb	r3, [r7, #1]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e26c      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4b92      	ldr	r3, [pc, #584]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00c      	beq.n	8001fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd4:	4b8f      	ldr	r3, [pc, #572]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d112      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x12c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d168      	bne.n	80020d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e246      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x76>
 8002010:	4b80      	ldr	r3, [pc, #512]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a7f      	ldr	r2, [pc, #508]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e02e      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x98>
 8002026:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7a      	ldr	r2, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b78      	ldr	r3, [pc, #480]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a77      	ldr	r2, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0xbc>
 800204a:	4b72      	ldr	r3, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a71      	ldr	r2, [pc, #452]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002064:	4b6b      	ldr	r3, [pc, #428]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6a      	ldr	r2, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a67      	ldr	r2, [pc, #412]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fcb6 	bl	80019f4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fcb2 	bl	80019f4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1fa      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xe4>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fca2 	bl	80019f4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fc9e 	bl	80019f4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1e6      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x10c>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d063      	beq.n	80021aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1ba      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4939      	ldr	r1, [pc, #228]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e03a      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_OscConfig+0x270>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff fc57 	bl	80019f4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff fc53 	bl	80019f4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e19b      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4927      	ldr	r1, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x270>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fc36 	bl	80019f4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff fc32 	bl	80019f4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e17a      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03a      	beq.n	800222c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d019      	beq.n	80021f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff fc16 	bl	80019f4 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc12 	bl	80019f4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e15a      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 fa9a 	bl	8002724 <RCC_Delay>
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff fbfc 	bl	80019f4 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fe:	e00f      	b.n	8002220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fbf8 	bl	80019f4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d908      	bls.n	8002220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e140      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	42420000 	.word	0x42420000
 800221c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b9e      	ldr	r3, [pc, #632]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e9      	bne.n	8002200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a6 	beq.w	8002386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b97      	ldr	r3, [pc, #604]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b94      	ldr	r3, [pc, #592]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a93      	ldr	r2, [pc, #588]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b91      	ldr	r3, [pc, #580]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b8e      	ldr	r3, [pc, #568]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a8a      	ldr	r2, [pc, #552]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7ff fbb9 	bl	80019f4 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7ff fbb5 	bl	80019f4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0fd      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x4f8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x312>
 80022ac:	4b7b      	ldr	r3, [pc, #492]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a7a      	ldr	r2, [pc, #488]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e02d      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x334>
 80022c2:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a75      	ldr	r2, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a72      	ldr	r2, [pc, #456]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	e01c      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x356>
 80022e4:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a6c      	ldr	r2, [pc, #432]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	e00b      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a66      	ldr	r2, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4b64      	ldr	r3, [pc, #400]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a63      	ldr	r2, [pc, #396]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d015      	beq.n	800234a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff fb69 	bl	80019f4 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff fb65 	bl	80019f4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0ab      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ee      	beq.n	8002326 <HAL_RCC_OscConfig+0x37e>
 8002348:	e014      	b.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7ff fb53 	bl	80019f4 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff fb4f 	bl	80019f4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e095      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ee      	bne.n	8002352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237a:	4b48      	ldr	r3, [pc, #288]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a47      	ldr	r2, [pc, #284]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8081 	beq.w	8002492 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d061      	beq.n	8002460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d146      	bne.n	8002432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_OscConfig+0x4fc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fb23 	bl	80019f4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff fb1f 	bl	80019f4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e067      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	492d      	ldr	r1, [pc, #180]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a19      	ldr	r1, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	430b      	orrs	r3, r1
 80023fe:	4927      	ldr	r1, [pc, #156]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x4fc>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff faf3 	bl	80019f4 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff faef 	bl	80019f4 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e037      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x46a>
 8002430:	e02f      	b.n	8002492 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_RCC_OscConfig+0x4fc>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fadc 	bl	80019f4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff fad8 	bl	80019f4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e020      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x498>
 800245e:	e018      	b.n	8002492 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e013      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x4f4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	429a      	cmp	r2, r3
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
 80024a4:	42420060 	.word	0x42420060

080024a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0d0      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d910      	bls.n	80024ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4965      	ldr	r1, [pc, #404]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0b8      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002504:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800250e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	494d      	ldr	r1, [pc, #308]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d040      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d115      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07f      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e073      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06b      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4936      	ldr	r1, [pc, #216]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7ff fa2c 	bl	80019f4 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7ff fa28 	bl	80019f4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e053      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d210      	bcs.n	80025f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4922      	ldr	r1, [pc, #136]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e032      	b.n	800265e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4916      	ldr	r1, [pc, #88]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	490e      	ldr	r1, [pc, #56]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002636:	f000 f821 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	490a      	ldr	r1, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1cc>)
 8002650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1d0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f98a 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40022000 	.word	0x40022000
 800266c:	40021000 	.word	0x40021000
 8002670:	08002f88 	.word	0x08002f88
 8002674:	20000064 	.word	0x20000064
 8002678:	20000068 	.word	0x20000068

0800267c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_RCC_GetSysClockFreq+0x94>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x30>
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x36>
 80026aa:	e027      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ae:	613b      	str	r3, [r7, #16]
      break;
 80026b0:	e027      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d010      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_GetSysClockFreq+0x94>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0c5b      	lsrs	r3, r3, #17
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_RCC_GetSysClockFreq+0x98>)
 80026de:	fb02 f203 	mul.w	r2, r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e004      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	613b      	str	r3, [r7, #16]
      break;
 80026fa:	e002      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fe:	613b      	str	r3, [r7, #16]
      break;
 8002700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002702:	693b      	ldr	r3, [r7, #16]
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	007a1200 	.word	0x007a1200
 8002718:	08002f98 	.word	0x08002f98
 800271c:	08002fa8 	.word	0x08002fa8
 8002720:	003d0900 	.word	0x003d0900

08002724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <RCC_Delay+0x34>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <RCC_Delay+0x38>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a5b      	lsrs	r3, r3, #9
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002740:	bf00      	nop
  }
  while (Delay --);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f9      	bne.n	8002740 <RCC_Delay+0x1c>
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000064 	.word	0x20000064
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fefe 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 fa56 	bl	8002c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e035      	b.n	8002884 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_TIM_Base_Start_IT+0x90>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_TIM_Base_Start_IT+0x4e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d004      	beq.n	800284e <HAL_TIM_Base_Start_IT+0x4e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIM_Base_Start_IT+0x94>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b06      	cmp	r3, #6
 800285e:	d010      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e007      	b.n	8002882 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400

08002898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0202 	mvn.w	r2, #2
 80028cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f998 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f98b 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f99a 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d020      	beq.n	8002948 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0204 	mvn.w	r2, #4
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f972 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f965 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f974 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d020      	beq.n	8002994 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0208 	mvn.w	r2, #8
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2204      	movs	r2, #4
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f94c 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f93f 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f94e 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d020      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0210 	mvn.w	r2, #16
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2208      	movs	r2, #8
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f926 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f919 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f928 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0201 	mvn.w	r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fbca 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa6f 	bl	8002f06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8f8 	bl	8002c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0220 	mvn.w	r2, #32
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa42 	bl	8002ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_TIM_ConfigClockSource+0x1c>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e0b4      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x186>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002acc:	d03e      	beq.n	8002b4c <HAL_TIM_ConfigClockSource+0xd4>
 8002ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad2:	f200 8087 	bhi.w	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ada:	f000 8086 	beq.w	8002bea <HAL_TIM_ConfigClockSource+0x172>
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	d87f      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae4:	2b70      	cmp	r3, #112	; 0x70
 8002ae6:	d01a      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xa6>
 8002ae8:	2b70      	cmp	r3, #112	; 0x70
 8002aea:	d87b      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b60      	cmp	r3, #96	; 0x60
 8002aee:	d050      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x11a>
 8002af0:	2b60      	cmp	r3, #96	; 0x60
 8002af2:	d877      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002af4:	2b50      	cmp	r3, #80	; 0x50
 8002af6:	d03c      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xfa>
 8002af8:	2b50      	cmp	r3, #80	; 0x50
 8002afa:	d873      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d058      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d86f      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b30      	cmp	r3, #48	; 0x30
 8002b06:	d064      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b08:	2b30      	cmp	r3, #48	; 0x30
 8002b0a:	d86b      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d060      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d867      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d05c      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d05a      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b1c:	e062      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6899      	ldr	r1, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f000 f96a 	bl	8002e06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	609a      	str	r2, [r3, #8]
      break;
 8002b4a:	e04f      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6899      	ldr	r1, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f000 f953 	bl	8002e06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b6e:	609a      	str	r2, [r3, #8]
      break;
 8002b70:	e03c      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f000 f8ca 	bl	8002d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2150      	movs	r1, #80	; 0x50
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f921 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002b90:	e02c      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f000 f8e8 	bl	8002d74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2160      	movs	r1, #96	; 0x60
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f911 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002bb0:	e01c      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 f8aa 	bl	8002d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2140      	movs	r1, #64	; 0x40
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f901 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e00c      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f000 f8f8 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002be2:	e003      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e000      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
	...

08002c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <TIM_Base_SetConfig+0xc0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_Base_SetConfig+0x28>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x28>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_Base_SetConfig+0xc4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <TIM_Base_SetConfig+0xc0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_Base_SetConfig+0x52>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0x52>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <TIM_Base_SetConfig+0xc4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <TIM_Base_SetConfig+0xc0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d103      	bne.n	8002ce8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	611a      	str	r2, [r3, #16]
  }
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400

08002d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 030a 	bic.w	r3, r3, #10
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0210 	bic.w	r2, r3, #16
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	031b      	lsls	r3, r3, #12
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f043 0307 	orr.w	r3, r3, #7
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	021a      	lsls	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e041      	b.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d004      	beq.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10c      	bne.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400

08002ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <__libc_init_array>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	2600      	movs	r6, #0
 8002f1c:	4d0c      	ldr	r5, [pc, #48]	; (8002f50 <__libc_init_array+0x38>)
 8002f1e:	4c0d      	ldr	r4, [pc, #52]	; (8002f54 <__libc_init_array+0x3c>)
 8002f20:	1b64      	subs	r4, r4, r5
 8002f22:	10a4      	asrs	r4, r4, #2
 8002f24:	42a6      	cmp	r6, r4
 8002f26:	d109      	bne.n	8002f3c <__libc_init_array+0x24>
 8002f28:	f000 f822 	bl	8002f70 <_init>
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	4d0a      	ldr	r5, [pc, #40]	; (8002f58 <__libc_init_array+0x40>)
 8002f30:	4c0a      	ldr	r4, [pc, #40]	; (8002f5c <__libc_init_array+0x44>)
 8002f32:	1b64      	subs	r4, r4, r5
 8002f34:	10a4      	asrs	r4, r4, #2
 8002f36:	42a6      	cmp	r6, r4
 8002f38:	d105      	bne.n	8002f46 <__libc_init_array+0x2e>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f40:	4798      	blx	r3
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7ee      	b.n	8002f24 <__libc_init_array+0xc>
 8002f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4a:	4798      	blx	r3
 8002f4c:	3601      	adds	r6, #1
 8002f4e:	e7f2      	b.n	8002f36 <__libc_init_array+0x1e>
 8002f50:	08002fac 	.word	0x08002fac
 8002f54:	08002fac 	.word	0x08002fac
 8002f58:	08002fac 	.word	0x08002fac
 8002f5c:	08002fb0 	.word	0x08002fb0

08002f60 <memset>:
 8002f60:	4603      	mov	r3, r0
 8002f62:	4402      	add	r2, r0
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <memset+0xa>
 8002f68:	4770      	bx	lr
 8002f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6e:	e7f9      	b.n	8002f64 <memset+0x4>

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
